/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MarkdownRenderChildLifetimeBugDemoPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MarkdownRenderChildLifetimeBugDemoPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.codeblocks = [];
    this.addCommand({
      id: "debug-log-active-code-blocks",
      name: "Debug log active code blocks",
      callback: () => {
        console.log(`The current number of loaded code blocks is ${this.codeblocks.length}.`, this.codeblocks);
      }
    });
    this.registerMarkdownCodeBlockProcessor("bug-report", (source, el, context) => {
      context.addChild(new Emoji(this, el, source.trim(), context.sourcePath));
    });
  }
  onunload() {
  }
};
var _Emoji = class extends import_obsidian.MarkdownRenderChild {
  constructor(plugin, containerEl, text, fileName) {
    super(containerEl);
    this.id = crypto.randomUUID();
    this.plugin = plugin;
    this.text = text;
    this.fileName = fileName;
  }
  onload() {
    var _a;
    this.plugin.codeblocks.push(this);
    console.log(`Loaded markdown render child in file "${this.fileName}" with content "${this.text}" with id "${this.id}". The current number of loaded render childes is ${this.plugin.codeblocks.length}.`);
    this.containerEl.createSpan({
      text: (_a = _Emoji.ALL_EMOJIS[this.text]) != null ? _a : this.text
    });
  }
  onunload() {
    this.plugin.codeblocks = this.plugin.codeblocks.filter((x) => x.id !== this.id);
    console.log(`Unloaded markdown render child in file "${this.fileName}" with content "${this.text}" with id "${this.id}". The remaining number of loaded render childes is ${this.plugin.codeblocks.length}.`);
  }
};
var Emoji = _Emoji;
Emoji.ALL_EMOJIS = {
  ":+1:": "\u{1F44D}",
  ":sunglasses:": "\u{1F60E}",
  ":smile:": "\u{1F604}"
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vbWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtNYXJrZG93blJlbmRlckNoaWxkLCBQbHVnaW59IGZyb20gJ29ic2lkaWFuJztcblxuLyoqXG4gKiBUaGlzIGRlbW9uc3RyYXRpb24gcGx1Z2luIHByb3ZpZGVzIGEgcmVwcm9kdWN0aW9uIGZvciBidWdzIGluIGxvYWRpbmcgYW5kIHVubG9hZGluZyBtYXJrZG93biByZW5kZXIgY2hpbGRlcyBpbiBib3RoIHJlYWRpbmcgYW5kIGxpdmUgcHJldmlldyBtb2RlLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXJrZG93blJlbmRlckNoaWxkTGlmZXRpbWVCdWdEZW1vUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0LyoqXG5cdCAqIEEgbGlzdCBvZiBhbGwgYWN0aXZlIG1hcmtkb3duIHJlbmRlciBjaGlsZGVzIGNyZWF0ZWQgYnkgdGhpcyBwbHVnaW4uXG5cdCAqIFdoZW4gdGhlIGBvbmxvYWRgIG1ldGhvZCBvZiBhIHJlbmRlciBjaGlsZCBpcyBjYWxsZWQsIGl0IGdldHMgYWRkZWQgdG8gdGhpcyBsaXN0LlxuXHQgKiBXaGVuIHRoZSBgb251bmxvYWRgIG1ldGhvZCBvZiBhIHJlbmRlciBjaGlsZCBpcyBjYWxsZWQsIGl0IGdldHMgcmVtb3ZlZCBmcm9tIHRoaXMgbGlzdC5cblx0ICovXG5cdGNvZGVibG9ja3M6IEVtb2ppW107XG5cblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0dGhpcy5jb2RlYmxvY2tzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBBIGNvbW1hbmQgdG8gcHJpbnQgb3V0IHRoZSBsaXN0IG9mIGN1cnJlbnRseSBsb2FkZWQgcmVuZGVyIGNoaWxkZXMuXG5cdFx0ICovXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnZGVidWctbG9nLWFjdGl2ZS1jb2RlLWJsb2NrcycsXG5cdFx0XHRuYW1lOiAnRGVidWcgbG9nIGFjdGl2ZSBjb2RlIGJsb2NrcycsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhgVGhlIGN1cnJlbnQgbnVtYmVyIG9mIGxvYWRlZCBjb2RlIGJsb2NrcyBpcyAke3RoaXMuY29kZWJsb2Nrcy5sZW5ndGh9LmAsIHRoaXMuY29kZWJsb2Nrcyk7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVnaXN0ZXIgb3VyIG1hcmtkb3duIHJlbmRlciBjaGlsZC5cblx0XHQgKi9cblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoJ2J1Zy1yZXBvcnQnLCAoc291cmNlLCBlbCwgY29udGV4dCkgPT4ge1xuXHRcdFx0Y29udGV4dC5hZGRDaGlsZChcblx0XHRcdFx0bmV3IEVtb2ppKHRoaXMsIGVsLCBzb3VyY2UudHJpbSgpLCBjb250ZXh0LnNvdXJjZVBhdGgpXG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cdFx0Ly8gZm9yIHRoaXMgc2hvd2Nhc2UgaXQgaXMgbm90IG5lY2Vzc2FyeSB0byB1bmxvYWQgYW55dGhpbmcgaGVyZVxuXHR9XG59XG5cbmNsYXNzIEVtb2ppIGV4dGVuZHMgTWFya2Rvd25SZW5kZXJDaGlsZCB7XG5cdHN0YXRpYyBBTExfRU1PSklTOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuXHRcdCc6KzE6JzogJ1x1RDgzRFx1REM0RCcsXG5cdFx0JzpzdW5nbGFzc2VzOic6ICdcdUQ4M0RcdURFMEUnLFxuXHRcdCc6c21pbGU6JzogJ1x1RDgzRFx1REUwNCcsXG5cdH07XG5cblx0dGV4dDogc3RyaW5nO1xuXHRmaWxlTmFtZTogc3RyaW5nO1xuXHRpZDogc3RyaW5nO1xuXHRwbHVnaW46IE1hcmtkb3duUmVuZGVyQ2hpbGRMaWZldGltZUJ1Z0RlbW9QbHVnaW47XG5cblx0Y29uc3RydWN0b3IocGx1Z2luOiBNYXJrZG93blJlbmRlckNoaWxkTGlmZXRpbWVCdWdEZW1vUGx1Z2luLCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQsIHRleHQ6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZykge1xuXHRcdHN1cGVyKGNvbnRhaW5lckVsKTtcblxuXHRcdHRoaXMuaWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy50ZXh0ID0gdGV4dDtcblx0XHR0aGlzLmZpbGVOYW1lID0gZmlsZU5hbWU7XG5cdH1cblxuXHRvbmxvYWQoKSB7XG5cdFx0Ly8gYWRkIHRoaXMgcmVuZGVyIGNoaWxkIHRvIHRoZSBjb2RlIGJsb2NrIGxpc3Rcblx0XHR0aGlzLnBsdWdpbi5jb2RlYmxvY2tzLnB1c2godGhpcyk7XG5cblx0XHRjb25zb2xlLmxvZyhgTG9hZGVkIG1hcmtkb3duIHJlbmRlciBjaGlsZCBpbiBmaWxlIFwiJHt0aGlzLmZpbGVOYW1lfVwiIHdpdGggY29udGVudCBcIiR7dGhpcy50ZXh0fVwiIHdpdGggaWQgXCIke3RoaXMuaWR9XCIuIFRoZSBjdXJyZW50IG51bWJlciBvZiBsb2FkZWQgcmVuZGVyIGNoaWxkZXMgaXMgJHt0aGlzLnBsdWdpbi5jb2RlYmxvY2tzLmxlbmd0aH0uYCk7XG5cblx0XHQvLyBhZGQgYW4gZW1vamkgdG8gdGhlIGNvbnRlbnQgb2YgdGhlIGNvZGUgYmxvY2suIFRoaXMgaGFzIG5vdGhpbmcgdG8gZG8gd2l0aCB0aGUgYnVnIGl0c2VsZi5cblx0XHR0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZVNwYW4oe1xuXHRcdFx0dGV4dDogRW1vamkuQUxMX0VNT0pJU1t0aGlzLnRleHRdID8/IHRoaXMudGV4dCxcblx0XHR9KTtcblx0fVxuXG5cdG9udW5sb2FkKCk6IHZvaWQge1xuXHRcdC8vIHJlbW92ZSB0aGlzIHJlbmRlciBjaGlsZCBmcm9tIHRoZSBjb2RlIGJsb2NrIGxpc3Rcblx0XHR0aGlzLnBsdWdpbi5jb2RlYmxvY2tzID0gdGhpcy5wbHVnaW4uY29kZWJsb2Nrcy5maWx0ZXIoeCA9PiB4LmlkICE9PSB0aGlzLmlkKTtcblxuXHRcdGNvbnNvbGUubG9nKGBVbmxvYWRlZCBtYXJrZG93biByZW5kZXIgY2hpbGQgaW4gZmlsZSBcIiR7dGhpcy5maWxlTmFtZX1cIiB3aXRoIGNvbnRlbnQgXCIke3RoaXMudGV4dH1cIiB3aXRoIGlkIFwiJHt0aGlzLmlkfVwiLiBUaGUgcmVtYWluaW5nIG51bWJlciBvZiBsb2FkZWQgcmVuZGVyIGNoaWxkZXMgaXMgJHt0aGlzLnBsdWdpbi5jb2RlYmxvY2tzLmxlbmd0aH0uYCk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBMEM7QUFLMUMsSUFBcUIsMkNBQXJCLGNBQXNFLHVCQUFPO0FBQUEsRUFTNUUsTUFBTSxTQUFTO0FBQ2QsU0FBSyxhQUFhLENBQUM7QUFLbkIsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLE1BQU07QUFDZixnQkFBUSxJQUFJLCtDQUErQyxLQUFLLFdBQVcsV0FBVyxLQUFLLFVBQVU7QUFBQSxNQUN0RztBQUFBLElBQ0QsQ0FBQztBQUtELFNBQUssbUNBQW1DLGNBQWMsQ0FBQyxRQUFRLElBQUksWUFBWTtBQUM5RSxjQUFRLFNBQ1AsSUFBSSxNQUFNLE1BQU0sSUFBSSxPQUFPLEtBQUssR0FBRyxRQUFRLFVBQVUsQ0FDdEQ7QUFBQSxJQUNELENBQUM7QUFBQSxFQUNGO0FBQUEsRUFFQSxXQUFXO0FBQUEsRUFFWDtBQUNEO0FBRUEsSUFBTSxTQUFOLGNBQW9CLG9DQUFvQjtBQUFBLEVBWXZDLFlBQVksUUFBa0QsYUFBMEIsTUFBYyxVQUFrQjtBQUN2SCxVQUFNLFdBQVc7QUFFakIsU0FBSyxLQUFLLE9BQU8sV0FBVztBQUU1QixTQUFLLFNBQVM7QUFDZCxTQUFLLE9BQU87QUFDWixTQUFLLFdBQVc7QUFBQSxFQUNqQjtBQUFBLEVBRUEsU0FBUztBQWpFVjtBQW1FRSxTQUFLLE9BQU8sV0FBVyxLQUFLLElBQUk7QUFFaEMsWUFBUSxJQUFJLHlDQUF5QyxLQUFLLDJCQUEyQixLQUFLLGtCQUFrQixLQUFLLHVEQUF1RCxLQUFLLE9BQU8sV0FBVyxTQUFTO0FBR3hNLFNBQUssWUFBWSxXQUFXO0FBQUEsTUFDM0IsTUFBTSxhQUFNLFdBQVcsS0FBSyxVQUF0QixZQUErQixLQUFLO0FBQUEsSUFDM0MsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLFdBQWlCO0FBRWhCLFNBQUssT0FBTyxhQUFhLEtBQUssT0FBTyxXQUFXLE9BQU8sT0FBSyxFQUFFLE9BQU8sS0FBSyxFQUFFO0FBRTVFLFlBQVEsSUFBSSwyQ0FBMkMsS0FBSywyQkFBMkIsS0FBSyxrQkFBa0IsS0FBSyx5REFBeUQsS0FBSyxPQUFPLFdBQVcsU0FBUztBQUFBLEVBQzdNO0FBQ0Q7QUF4Q0EsSUFBTSxRQUFOO0FBQ0MsQUFESyxNQUNFLGFBQXFDO0FBQUEsRUFDM0MsUUFBUTtBQUFBLEVBQ1IsZ0JBQWdCO0FBQUEsRUFDaEIsV0FBVztBQUNaOyIsCiAgIm5hbWVzIjogW10KfQo=
