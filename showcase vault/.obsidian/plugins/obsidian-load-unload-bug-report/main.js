/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BugReportPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var BugReportPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.codeblocks = [];
    this.addCommand({
      id: "debug-log-active-code-blocks",
      name: "Debug log active code blocks",
      callback: () => {
        console.log(this.codeblocks);
      }
    });
    this.registerMarkdownPostProcessor((element, context) => {
      const codeblocks = element.querySelectorAll("code");
      for (let index = 0; index < codeblocks.length; index++) {
        const codeblock = codeblocks.item(index);
        const text = codeblock.innerText.trim();
        const isEmoji = text[0] === ":" && text[text.length - 1] === ":";
        if (isEmoji) {
          context.addChild(new Emoji(this, codeblock, text, context.sourcePath));
        }
      }
    });
    this.registerMarkdownCodeBlockProcessor("bug-report", (source, el, context) => {
      const codeblock = el;
      const text = source.trim();
      context.addChild(new Emoji(this, codeblock, text, context.sourcePath));
    });
  }
  loadCodeblock(emoji) {
    this.codeblocks.push(emoji);
  }
  unloadCodeblock(emoji) {
    this.codeblocks = this.codeblocks.filter((x) => x.id !== emoji.id);
  }
  onunload() {
  }
};
var _Emoji = class extends import_obsidian.MarkdownRenderChild {
  constructor(plugin, containerEl, text, fileName) {
    super(containerEl);
    this.id = crypto.randomUUID();
    this.plugin = plugin;
    this.text = text;
    this.fileName = fileName;
  }
  onload() {
    var _a;
    console.log(`loaded markdown render child in file "${this.fileName}" with content "${this.text}" with id "${this.id}"`);
    this.plugin.loadCodeblock(this);
    const emojiEl = this.containerEl.createSpan({
      text: (_a = _Emoji.ALL_EMOJIS[this.text]) != null ? _a : this.text
    });
  }
  onunload() {
    console.log(`unloaded markdown render child in file "${this.fileName}" with content "${this.text}" with id "${this.id}"`);
    this.plugin.unloadCodeblock(this);
  }
};
var Emoji = _Emoji;
Emoji.ALL_EMOJIS = {
  ":+1:": "\u{1F44D}",
  ":sunglasses:": "\u{1F60E}",
  ":smile:": "\u{1F604}"
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vbWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtNYXJrZG93blJlbmRlckNoaWxkLCBQbHVnaW59IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVnUmVwb3J0UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0Y29kZWJsb2NrczogRW1vamlbXTtcblxuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblxuXHRcdHRoaXMuY29kZWJsb2NrcyA9IFtdO1xuXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnZGVidWctbG9nLWFjdGl2ZS1jb2RlLWJsb2NrcycsXG5cdFx0XHRuYW1lOiAnRGVidWcgbG9nIGFjdGl2ZSBjb2RlIGJsb2NrcycsXG5cdFx0XHRjYWxsYmFjazogKCkgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmxvZyh0aGlzLmNvZGVibG9ja3MpO1xuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoKGVsZW1lbnQsIGNvbnRleHQpID0+IHtcblx0XHRcdGNvbnN0IGNvZGVibG9ja3MgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJjb2RlXCIpO1xuXG5cdFx0XHRmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgY29kZWJsb2Nrcy5sZW5ndGg7IGluZGV4KyspIHtcblx0XHRcdFx0Y29uc3QgY29kZWJsb2NrID0gY29kZWJsb2Nrcy5pdGVtKGluZGV4KTtcblx0XHRcdFx0Y29uc3QgdGV4dCA9IGNvZGVibG9jay5pbm5lclRleHQudHJpbSgpO1xuXHRcdFx0XHRjb25zdCBpc0Vtb2ppID0gdGV4dFswXSA9PT0gXCI6XCIgJiYgdGV4dFt0ZXh0Lmxlbmd0aCAtIDFdID09PSBcIjpcIjtcblxuXHRcdFx0XHRpZiAoaXNFbW9qaSkge1xuXHRcdFx0XHRcdGNvbnRleHQuYWRkQ2hpbGQobmV3IEVtb2ppKHRoaXMsIGNvZGVibG9jaywgdGV4dCwgY29udGV4dC5zb3VyY2VQYXRoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcignYnVnLXJlcG9ydCcsIChzb3VyY2UsIGVsLCBjb250ZXh0KSA9PiB7XG5cdFx0XHRjb25zdCBjb2RlYmxvY2sgPSBlbDtcblx0XHRcdGNvbnN0IHRleHQgPSBzb3VyY2UudHJpbSgpO1xuXG5cdFx0XHRjb250ZXh0LmFkZENoaWxkKG5ldyBFbW9qaSh0aGlzLCBjb2RlYmxvY2ssIHRleHQsIGNvbnRleHQuc291cmNlUGF0aCkpO1xuXHRcdH0pO1xuXHR9XG5cblx0bG9hZENvZGVibG9jayhlbW9qaTogRW1vamkpIHtcblx0XHR0aGlzLmNvZGVibG9ja3MucHVzaChlbW9qaSk7XG5cdH1cblxuXHR1bmxvYWRDb2RlYmxvY2soZW1vamk6IEVtb2ppKSB7XG5cdFx0dGhpcy5jb2RlYmxvY2tzID0gdGhpcy5jb2RlYmxvY2tzLmZpbHRlcih4ID0+IHguaWQgIT09IGVtb2ppLmlkKTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXG5cdH1cbn1cblxuY2xhc3MgRW1vamkgZXh0ZW5kcyBNYXJrZG93blJlbmRlckNoaWxkIHtcblx0c3RhdGljIEFMTF9FTU9KSVM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG5cdFx0XCI6KzE6XCI6IFwiXHVEODNEXHVEQzREXCIsXG5cdFx0XCI6c3VuZ2xhc3NlczpcIjogXCJcdUQ4M0RcdURFMEVcIixcblx0XHRcIjpzbWlsZTpcIjogXCJcdUQ4M0RcdURFMDRcIixcblx0fTtcblxuXHR0ZXh0OiBzdHJpbmc7XG5cdGZpbGVOYW1lOiBzdHJpbmc7XG5cdGlkOiBzdHJpbmc7XG5cdHBsdWdpbjogQnVnUmVwb3J0UGx1Z2luO1xuXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjogQnVnUmVwb3J0UGx1Z2luLCBjb250YWluZXJFbDogSFRNTEVsZW1lbnQsIHRleHQ6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZykge1xuXHRcdHN1cGVyKGNvbnRhaW5lckVsKTtcblxuXHRcdHRoaXMuaWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpO1xuXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy50ZXh0ID0gdGV4dDtcblx0XHR0aGlzLmZpbGVOYW1lID0gZmlsZU5hbWU7XG5cdH1cblxuXHRvbmxvYWQoKSB7XG5cdFx0Y29uc29sZS5sb2coYGxvYWRlZCBtYXJrZG93biByZW5kZXIgY2hpbGQgaW4gZmlsZSBcIiR7dGhpcy5maWxlTmFtZX1cIiB3aXRoIGNvbnRlbnQgXCIke3RoaXMudGV4dH1cIiB3aXRoIGlkIFwiJHt0aGlzLmlkfVwiYCk7XG5cdFx0dGhpcy5wbHVnaW4ubG9hZENvZGVibG9jayh0aGlzKTtcblxuXHRcdGNvbnN0IGVtb2ppRWwgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZVNwYW4oe1xuXHRcdFx0dGV4dDogRW1vamkuQUxMX0VNT0pJU1t0aGlzLnRleHRdID8/IHRoaXMudGV4dCxcblx0XHR9KTtcblx0XHQvLyB0aGlzLmNvbnRhaW5lckVsLnJlcGxhY2VXaXRoKGVtb2ppRWwpO1xuXHR9XG5cblx0b251bmxvYWQoKTogdm9pZCB7XG5cdFx0Y29uc29sZS5sb2coYHVubG9hZGVkIG1hcmtkb3duIHJlbmRlciBjaGlsZCBpbiBmaWxlIFwiJHt0aGlzLmZpbGVOYW1lfVwiIHdpdGggY29udGVudCBcIiR7dGhpcy50ZXh0fVwiIHdpdGggaWQgXCIke3RoaXMuaWR9XCJgKTtcblx0XHR0aGlzLnBsdWdpbi51bmxvYWRDb2RlYmxvY2sodGhpcyk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBMEM7QUFFMUMsSUFBcUIsa0JBQXJCLGNBQTZDLHVCQUFPO0FBQUEsRUFJbkQsTUFBTSxTQUFTO0FBRWQsU0FBSyxhQUFhLENBQUM7QUFFbkIsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLE1BQU07QUFDZixnQkFBUSxJQUFJLEtBQUssVUFBVTtBQUFBLE1BQzVCO0FBQUEsSUFDRCxDQUFDO0FBRUQsU0FBSyw4QkFBOEIsQ0FBQyxTQUFTLFlBQVk7QUFDeEQsWUFBTSxhQUFhLFFBQVEsaUJBQWlCLE1BQU07QUFFbEQsZUFBUyxRQUFRLEdBQUcsUUFBUSxXQUFXLFFBQVEsU0FBUztBQUN2RCxjQUFNLFlBQVksV0FBVyxLQUFLLEtBQUs7QUFDdkMsY0FBTSxPQUFPLFVBQVUsVUFBVSxLQUFLO0FBQ3RDLGNBQU0sVUFBVSxLQUFLLE9BQU8sT0FBTyxLQUFLLEtBQUssU0FBUyxPQUFPO0FBRTdELFlBQUksU0FBUztBQUNaLGtCQUFRLFNBQVMsSUFBSSxNQUFNLE1BQU0sV0FBVyxNQUFNLFFBQVEsVUFBVSxDQUFDO0FBQUEsUUFDdEU7QUFBQSxNQUNEO0FBQUEsSUFDRCxDQUFDO0FBRUQsU0FBSyxtQ0FBbUMsY0FBYyxDQUFDLFFBQVEsSUFBSSxZQUFZO0FBQzlFLFlBQU0sWUFBWTtBQUNsQixZQUFNLE9BQU8sT0FBTyxLQUFLO0FBRXpCLGNBQVEsU0FBUyxJQUFJLE1BQU0sTUFBTSxXQUFXLE1BQU0sUUFBUSxVQUFVLENBQUM7QUFBQSxJQUN0RSxDQUFDO0FBQUEsRUFDRjtBQUFBLEVBRUEsY0FBYyxPQUFjO0FBQzNCLFNBQUssV0FBVyxLQUFLLEtBQUs7QUFBQSxFQUMzQjtBQUFBLEVBRUEsZ0JBQWdCLE9BQWM7QUFDN0IsU0FBSyxhQUFhLEtBQUssV0FBVyxPQUFPLE9BQUssRUFBRSxPQUFPLE1BQU0sRUFBRTtBQUFBLEVBQ2hFO0FBQUEsRUFFQSxXQUFXO0FBQUEsRUFFWDtBQUNEO0FBRUEsSUFBTSxTQUFOLGNBQW9CLG9DQUFvQjtBQUFBLEVBWXZDLFlBQVksUUFBeUIsYUFBMEIsTUFBYyxVQUFrQjtBQUM5RixVQUFNLFdBQVc7QUFFakIsU0FBSyxLQUFLLE9BQU8sV0FBVztBQUU1QixTQUFLLFNBQVM7QUFDZCxTQUFLLE9BQU87QUFDWixTQUFLLFdBQVc7QUFBQSxFQUNqQjtBQUFBLEVBRUEsU0FBUztBQTNFVjtBQTRFRSxZQUFRLElBQUkseUNBQXlDLEtBQUssMkJBQTJCLEtBQUssa0JBQWtCLEtBQUssS0FBSztBQUN0SCxTQUFLLE9BQU8sY0FBYyxJQUFJO0FBRTlCLFVBQU0sVUFBVSxLQUFLLFlBQVksV0FBVztBQUFBLE1BQzNDLE1BQU0sYUFBTSxXQUFXLEtBQUssVUFBdEIsWUFBK0IsS0FBSztBQUFBLElBQzNDLENBQUM7QUFBQSxFQUVGO0FBQUEsRUFFQSxXQUFpQjtBQUNoQixZQUFRLElBQUksMkNBQTJDLEtBQUssMkJBQTJCLEtBQUssa0JBQWtCLEtBQUssS0FBSztBQUN4SCxTQUFLLE9BQU8sZ0JBQWdCLElBQUk7QUFBQSxFQUNqQztBQUNEO0FBcENBLElBQU0sUUFBTjtBQUNDLEFBREssTUFDRSxhQUFxQztBQUFBLEVBQzNDLFFBQVE7QUFBQSxFQUNSLGdCQUFnQjtBQUFBLEVBQ2hCLFdBQVc7QUFDWjsiLAogICJuYW1lcyI6IFtdCn0K
